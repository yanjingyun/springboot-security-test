单体应用存在的问题：
	随着业务的发展，开发变得越来月复杂。
	修改、新增某个功能，需要对整个系统进行测试，重新部署
	一个模块出现问题，很可能导致整个系统崩溃
	多个团队开发同时

单点登录：
	《单点登录流程图.png》
	https://blog.csdn.net/chenleiking/article/details/81046233


OAuth协议：
	主要解决授权问题，该协议定义了四种授权方式：授权码方式、密码授权方式、简化授权方式、客户端授权方式
	
	授权服务器主要是提供用户认证、授权、颁发令牌等功能，而资源服务器主要是保护用户资源。授权服务器先给合法的用户颁发令牌，用户再使用获得的令牌到资源服务器申请受保护的用户资源，而资源服务器接收到用户的请求后，会先验证用户的令牌，只有令牌合法才会把用户请求的资源返回给用户，否则拒绝返回。

	资源服务器验证用户的令牌可以有多种，既可以到授权服务器处进行验证，也可以自己验证。只有授权服务器使用非对称加密令牌或者使用对称加密令牌的方式，且资源服务器知道授权服务器用于加密令牌的密钥所对应的公钥时，资源服务器才能自己验证令牌。


OAuth2授权服务器 && OAuth2资源服务器：
	授权服务器(AuthorizationServer)主要功能：
		1、验证用户的username/password
		2、验证客户端的client_id和secret
		3、为验证通过的用户或客户端颁发code或token
		4、验证客户端提供的token是否合法
		5、根据有效的token提供对应的用户或客户端详细信息
	资源服务器(ResourceServer)主要功能：
		1、指定OAuth客户端信息：
			clientId
			clientSecret
			获取授权码(code)(/oauth/authorize)
			获取令牌(access_token)地址(/oauth/token)
			检查令牌是否有效地址(/oauth/check_token)
		2、提供资源服务


资源服务器：
	-1）accessToken和client_id的校验
	-2）token校验通过后要对token访问权限做好限制
授权服务器：
	-1）接收第三方应用的申请，维护client_id
	-2）提供登录页面，做用户、密码鉴权
	-3）授权码生成和验证
	-4）token的生成
	-5）client_id、token维护。一般clientId入库，token入内存


OAuth协议参与实体：
	RO(resource owner)：资源所有者，对资源具有授权能力的人
	RS(resource server)：资源服务器，它存储资源，并处理对资源的访问请求
	Client：第三方应用，它获得RO的授权后便可以去访问RO的资源
	AS(authorization server)：授权服务器，它认证RO的身份，为RO提供授权审批流程，并最终颁发授权令牌(AccessToken)。
	注：AS与RS的功能可以由同一个服务器来提供服务


OAuth协议的基本流程：
	--前提：OAuth2中的资源服务器和授权服务器都是属于资源所有方，即服务提供方，第三方接入需要先与鉴权服务器申请合作获取客户编码。
	-1）Client请求RO的授权，请求中一般包含：要访问的资源路径、操作系统、Client的身份等信息
	-2）RO批准授权，并将“授权证据”发送给Client。至于RO如何批准是协议外的事。典型的做法是，AS提供授权审批界面，让RO显式批准。
	-3）Client向AS请求“访问令牌AccessToken”。此时，Client需向AS提供RO的“授权证据”，以及Client自己身份的凭证。
	-4）AS验证通过后，向Client返回“访问令牌”。访问令牌也有多种类型，若为bearer类型，那么谁持有访问令牌，谁就能访问资源。
	-5）Client携带“访问令牌”访问RS上的资源。在令牌的有效期内，Client可以多次携带令牌去访问资源。
	-6）RS验证令牌的有效性，比如是否伪造、是否越权、是否过期，验证通过后，才能提供服务。


实例1：授权码模式，获取token，并访问资源(微信关联LinkedIn应用)：
	相关链接：https://www.cnblogs.com/loveis715/p/4491456.html
	--前提：微信先在LinkedIn中申请合作，得到client_id
--1.申请授权码(登录)：
	https://{linkedin_oauth_url}/authorize?response_type=code&client_id=client_id&redirect_uri=callback_url&scope=read&state=xxx
	参数说明：
		client_id：表示第三方在鉴权服务器所对应的应用Id
		redirect_uri：表示第三方在得到了用户授权后，将重定向到的地址
		scope：表示第三方所申请的权限
		response_type：表示第三方所请求的Authorization Grant的类型
		state：表示第三方的状态		
	返回：授权码(authorization_code)
	一旦成功转向了该URL，那么将显示LinkedIn登录界面并赋予权限的页面。如果第三方用户成功登录并允许第三方访问这些信息，将返回授权码，并重定向到redirect_uri的地址。
	重定向地址时还会附带授权码：
		--微信通过authorization_code得知用户所勾选的权限
		https://{redirect_uri}?code=authorization_code
--2.通过授权码换取访问令牌：
	--微信通过授权码换取资源所需要的访问令牌(AccessToken)
	https://{linkedin_oauth_url}/token?client_id=client_id&code=authorization_code&grant_type=authorization_code&redirect_uri=callback_url
	参数说明：
		client_id：表示第三方在鉴权服务器所对应的应用Id
		code：刚从LinkedIn获取的授权码
		grant_type：用来表示授权码类型
		redirect_uri：表示成功获取访问令牌后后，将重定向到的地址
	返回：令牌(AccessToken/AuthorizationGrant)
	在应用成功地得到了访问资源的令牌之后，LinkedIn将返回一个包含了资源访问令牌的响应。同时浏览器将被重定向到redirect_uri所标示的位置。
--3.通过令牌访问资源：
	参数：client_id、accessToken


实例1：密码模式，获取token，并访问资源
--1.请求认证服务端获取token（密码模式）
	POST http://localhost:6001/oauth/token?grant_type=password&username=admin&password=123456&scope=all
	Accept: */*
	Cache-Control: no-cache
	Authorization: Basic dXNlci1jbGllbnQ6dXNlci1zZWNyZXQtODg4OA==
	说明：
		Authorization 要加在请求头中，格式为 Basic 空格 base64(clientId:clientSecret)
		使用 base64 编码(user-client:user-secret-8888)之后的值为 dXNlci1jbGllbnQ6dXNlci1zZWNyZXQtODg4OA==
		通过 https://www.sojson.com/base64.html 在线编码获取
	响应参数：
	{
		"access_token": "9f958300-5005-46ea-9061-323c9e6c7a4d",
		"token_type": "bearer",
		"refresh_token": "0f5871f5-98f1-405e-848e-80f641bab72e",
		"expires_in": 3599,
		"scope": "all"
	}

--2.使用token 请求资源接口
	GET http://localhost:6101/client-user/get
	Accept: */*
	Cache-Control: no-cache
	Authorization: bearer ce334918-e666-455a-8ecd-8bd680415d84

--3.刷新令牌
	### 换取 access_token
	POST http://localhost:6001/oauth/token?grant_type=refresh_token&refresh_token=706dac10-d48e-4795-8379-efe8307a2282
	Accept: */*
	Cache-Control: no-cache
	Authorization: Basic dXNlci1jbGllbnQ6dXNlci1zZWNyZXQtODg4OA==




授权码模式获取access_token流程：
	1.浏览器访问该地址时会自动跳转到登录页进行登录授权后得到code(客户端为client_1)
		浏览器输入：http://localhost:8080/oauth/authorize?client_id=client_1&response_type=code
		说明：
			1、系统无该client_id时会报错：error="invalid_client"
			2、参数redirect_uri可选，但必须是该client_id中配置的uri，否则报错。
	2.客户端1发送post请求得到access_token(两种方式)
		// client1-客户端Id，secret-客户端secret，code-步骤1的code
		localhost:8080/oauth/token?grant_type=authorization_code&code=H9BiYp&client_id=client1&client_secret=secret //方式1
		
		http://client1:secret@localhost:8080/oauth/token?code=CxZGdK&grant_type=authorization_code //方式2
		说明：
			1、必须是POST请求；grant_type必须为authorization_code；
			2、grant_type、client_id、client_secret必填，且与配置类中保持一致；
			3、client_id和client_secret也可以使用Basic认证的方式传递给授权服务器。
		该接口(/oauth/token)还需要在OAuth授权配置类中添加如下配置方法：
			// 详情：https://blog.csdn.net/u012040869/article/details/80140515
			@Override
			public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {
				security.tokenKeyAccess("permitAll()").checkTokenAccess("permitAll()").allowFormAuthenticationForClients();
			}
	3.通过令牌访问资源
		方式1： 	http://localhost:8081/getMyResource?access_token={access_token}
		方式2： 	在header里添加Authorization属性，值为bearer {access_token}

密码模式获取access_token流程：
	1.获取access_token
	http://localhost:8080/oauth/token?grant_type=password&username=admin&password=123&scope=all
		head添加属性：Authorization/Basic Y2xpZW50XzI6c2VjcmV0
	2.通过令牌访问资源
		方式1： 	http://localhost:8081/getMyResource?access_token={access_token}
		方式2： 	在header里添加Authorization属性，值为bearer {access_token}



@EnableAuthorizationServer注解：
	其导入两个配置类：
		AuthorizationServerEndpointsConfiguration
		AuthorizationServerSecurityConfiguration
	根据@EnableAuthorizationServer注解可知，该AuthorizationServer暴露了两个Http Endpoint：
		--开启SecurityOAuth2注解，以提供/oauth/token、/oauth/check_token、/oauth/authorize等endpoint
		
		/oauth/authorize // 获取授权码code，实现类AuthorizationEndpoint
		/oauth/token	// 获取access_token，实现类TokenEndpoint


AuthorizationServerConfigurerAdapter类说明：
	public class AuthorizationServerConfigurerAdapter implements AuthorizationServerConfigurer {

		// 1.配置客户端：clientId、secret、scope、resourceIds、authorizedGrantTypes、redirectUrl
		public void configure(ClientDetailsServiceConfigurer clients) throws Exception {}
		
		// 2.用来配置令牌访问端点和令牌服务
		public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {}

		// 3.配置令牌端点的安全约束
		public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {}
	}


客户端信息存储到数据库中：
	@Autowired
    private DataSource dataSource;

	@Override
    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
        JdbcClientDetailsServiceBuilder jcsb = clients.jdbc(dataSource);
        jcsb.passwordEncoder(passwordEncoder);
    }

    CREATE TABLE oauth_client_details (
		client_id VARCHAR ( 256 ) PRIMARY KEY,
		resource_ids VARCHAR ( 256 ),
		client_secret VARCHAR ( 256 ),
		scope VARCHAR ( 256 ),
		authorized_grant_types VARCHAR ( 256 ),
		web_server_redirect_uri VARCHAR ( 256 ),
		authorities VARCHAR ( 256 ),
		access_token_validity INTEGER,
		refresh_token_validity INTEGER,
		additional_information VARCHAR ( 4096 ),
		autoapprove VARCHAR ( 256 )
	);

	INSERT INTO oauth_client_details ( client_id, client_secret, scope, authorized_grant_types, web_server_redirect_uri, authorities, access_token_validity, refresh_token_validity, additional_information, autoapprove )
	VALUES
		( 'user-client', '$2a$10$o2l5kA7z.Caekp72h5kU7uqdTDrlamLq.57M1F6ulJln9tRtOJufq', 'all', 'authorization_code,refresh_token,password', NULL, NULL, 3600, 36000, NULL, TRUE );

	INSERT INTO oauth_client_details ( client_id, client_secret, scope, authorized_grant_types, web_server_redirect_uri, authorities, access_token_validity, refresh_token_validity, additional_information, autoapprove )
	VALUES
		( 'order-client', '$2a$10$GoIOhjqFKVyrabUNcie8d.ADX.qZSxpYbO6YK4L2gsNzlCIxEUDlW', 'all', 'authorization_code,refresh_token,password', NULL, NULL, 3600, 36000, NULL, TRUE );





***********************概念描述***********************
sso、cas、shiro、OAuth区分：
	...

OAuth与SSO区别：
	SSO是为了解决一个用户在鉴权服务器登陆过一次以后，可以在任何应用中畅通无阻，一次登陆，多系统访问，操作用户是实打实的该应用的官方用户，用户的权限和分域以鉴权服务器的存储为准。
	OAuth2.0解决的是通过令牌获取某个系统的操作权限，因为有clientId的标识，一次登陆只能对该系统生效，操作用户属于第三方系统而非鉴权系统的官方用户，授权权限鉴权中心可以做限制。


SSO与OAuth2描述：
	SSO是一种思想，或者说是一种解决方案，是抽象的，我们要做的就是按照它的这种思想去实现单点登录。
	OAuth2是用来允许用户授权第三方应用访问他在另一个服务器上的资源的一种协议，它不是用来做单点登录的，但我们可以利用它来实现单点登录。


shiro和oauth、cas它们之间的关系？
	cas和oauth是解决单点登录的组件，shiro主要负责权限安全方面的工作，所以功能点不一致。但往往需要单点登录和权限控制一起来使用，所以就有cas+shiro和oauth+shiro组合。如oauth负责多后台统一登录认证，shiro负责给登录用户赋予不同的访问权限。
	token一般是客户端登录后服务器生成的令牌，每次访问服务端会进行校验，一般保存到内存或其它介质；若web服务器有几台负载，则需要session共享，可以使用session保存。
